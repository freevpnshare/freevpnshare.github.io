<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
       <link rel="canonical" href="https://freevpnshare.github.io/news/article-90329.htm" />
    <!-- basic -->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- mobile metas -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="viewport" content="initial-scale=1, maximum-scale=1">
    <link rel="icon" href="/assets/website/img/clashfans/favicon.ico" type="image/x-icon"/>
    <!-- site metas -->
    <title>Kotlin（二） 标准函数和静态方法</title>
        <meta name="description" content="1、标准函数 标准函数是指Standard.kt文件中定义的函数  1.1、let函数 let函数提供了函数式API编程接口，并将原始对象作为参数传递到Lambda表达式中，标准的写法如下： obj." />
    
    <meta name="author" content="免费VPN分享 免费节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://freevpnshare.github.io/news/article-90329.htm" />
    <meta property="og:site_name" content="免费VPN分享 免费节点订阅官网" />
    <meta property="og:title" content="Kotlin（二） 标准函数和静态方法" />
    <meta property="og:image" content="https://freevpnshare.github.io/uploads/20240307/203388bd8d900f5f1b4340b4557d9a9c.webp" />
        <meta property="og:release_date" content="2025-04-07T09:02:00" />
    <meta property="og:updated_time" content="2025-04-07T09:02:00" />
        <meta property="og:description" content="1、标准函数 标准函数是指Standard.kt文件中定义的函数  1.1、let函数 let函数提供了函数式API编程接口，并将原始对象作为参数传递到Lambda表达式中，标准的写法如下： obj." />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Kotlin（二） 标准函数和静态方法">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    <link rel="dns-prefetch" href="https://cdn.bootcdn.net">

    <!-- bootstrap css -->
    <link rel="stylesheet" type="text/css" href="/assets/website/css/clashfans/bootstrap.min.css">
    <!-- style css -->
    <link rel="stylesheet" type="text/css" href="/assets/website/css/clashfans/style.css">
    <!-- Responsive-->
    <link rel="stylesheet" href="/assets/website/css/clashfans/responsive.css">
    <!-- Scrollbar Custom CSS -->
    <link rel="stylesheet" href="/assets/website/css/clashfans/jquery.mCustomScrollbar.min.css">
    <!-- Tweaks for older IEs-->
    <link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
    <!-- fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-15XX2VLK02"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-15XX2VLK02');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
       <!-- header section start -->
    <div class="header_section">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">免费VPN分享</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/client.htm">客户端</a>
                        </li>
                                            </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
      <!-- services section start -->
      <div class="services_section layout_padding">
         <div class="container">
            <div class="row">
               <div class="col-sm-12">
                  <h1 class="services_taital"><span class="about_icon">Kotlin（二） 标准函数和静态方法 </h1>
                    <p class="nav-box text-center">
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</span>
                    </p>
               </div>
            </div>
         </div>
      </div>
      <!-- services section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="Clash Node官网订阅站" data-url="https://clashnode.github.io">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <h2> <a id="1_0" rel="nofollow"></a>1、标准函数</h2> <p>标准函数是指Standard.kt文件中定义的函数</p> <h4> <a id="11let_3" rel="nofollow"></a>1.1、let函数</h4> <p>let函数提供了函数式API编程接口，并将原始对象作为参数传递到Lambda表达式中，标准的写法如下：</p> <pre><code>obj.let {             obj1-&gt;需要执行的逻辑         }          </code></pre> <p>obj1就是obj对象这里写成obj1只是为了防止命名重复的问题，使用的场景如下：</p> <pre><code>fun doStudy(study: Study?) {         study?.readBook()         study?.doHomeWork()     } </code></pre> <p>上面代码相当于每次调用Study对象的方法，都需要对study进行判空，我们可以使用let函数配合?.即可解决这个问题。</p> <pre><code>fun doStudy(study: Study?) {         study?.let {             it.readBook()             it.doHomeWork()         }     } </code></pre> <h4> <a id="12with_28" rel="nofollow"></a>1.2、with函数</h4> <p>with函数接收两个参数：</p> <ul> <li>第一个参数：任意类型的对象</li> <li>第二个参数：一个Lambda表达式</li> </ul> <p>with函数会在Lambda表达式中提供第一个参数对象的上下文，并将Lambda表达式最后一行代码作为返回值返回。</p> <ul> <li>with函数的作用：它可以在连续调用同一个对象的多个方法时使代码变得简洁。具体示例如下：</li> </ul> <pre><code>val list= listOf&lt;String&gt;("Apple","Banana","Orange","Pear","Grape") val builder=StringBuilder() builder.append("Start eating fruit \n") for(fruit in list){     builder.append("$fruit \n") } builder.append("Ate all fruit") val result=builder.toString() println(result)     </code></pre> <p>仔细观察上面代码，我们多次使用builder对象调用append()进行字符串的拼接，这个时候我们就可以使用with函数来简化这个过程。</p> <pre><code>val list= listOf&lt;String&gt;("Apple","Banana","Orange","Pear","Grape") val result=with(StringBuilder()){     append("Start eating fruit \n")     for(fruit in list){         append("$fruit \n")     }     append("Ate all fruit") toString() } println(result) </code></pre> <h4> <a id="13run_62" rel="nofollow"></a>1.3、run函数</h4> <p>run函数的使用场景和with函数的使用场景一样，只不过用法上有点差别。</p> <ol> <li>run函数必须由对象调用。</li> <li>run函数只接受一个参数即Lambda表达式，并将调用对象作为Lambda表达式的上下文。</li> <li>Lambda表达式最后一行代码作为run函数的返回值返回。<br /> 具体示例如下：</li> </ol> <pre><code>val list=listOf("Apple","Banana","Orange","Pear","Grape") val builder=StringBuilder() val result=builder.run {     append("Start eating fruit \n")     for(fruit in list){         append("$fruit \n")     }     append("Ate all fruits")     toString() } </code></pre> <p>和with函数基本一致，只不过是将调用with函数传入StringBuilder对象改成了StringBuilder对象调用run函数。其他没有什么区别。</p> <h4> <a id="14apply_83" rel="nofollow"></a>1.4、apply函数</h4> <p>apply函数和run函数也是极其相似的，都是在某个对象上使用并且只接受一个Lambda表达式参数，调用对象作为Lambda表达式的上下文，不同的是apply函数无法指定返回值，而是返回调用对象本身。示例如下：</p> <pre><code>val list=listOf("Apple","Banana","Orange","Pear","Grape") val builder=StringBuilder() val result=builder.apply{     append("Start eating fruit \n")     for(fruit in list){         append("$fruit \n")     }     append("Ate all fruits") } println(result.toString()) </code></pre> <p>由于apply函数无法指定返回值，只返回调用对象本身，所以这里的result是StringBuilder对象。</p> <h4> <a id="15repeat_99" rel="nofollow"></a>1.5、repeat函数</h4> <p>repeat函数接收2个参数，第一个参数是Int类型的，第二个参数Lambda表达式。第一个参数的意思表示的是指Lambda表达式中内容执行的次数。</p> <pre><code>  val list=ArrayList&lt;String&gt;()         repeat(2) {             list.add("1")             list.add("2")         } //集合中的数据就是1,2,1,2 </code></pre> <p>可以看到1,2添加了2遍。</p> <h4> <a id="16also_111" rel="nofollow"></a>1.6、also函数</h4> <p>also函数接收一个参数Lambda表达式。可以在表达式执行前进行非null校验,传入参数为it,返回值固定为this自身类型</p> <pre><code>val list=listOf("Apple","Banana","Orange","Pear","Grape") val builder=StringBuilder() val result=builder?.also{     it.append("Start eating fruit \n")     for(fruit in list){         it.append("$fruit \n")     }     it.append("Ate all fruits") } println(result.toString()) </code></pre> <p>只返回调用对象本身，所以这里的result是StringBuilder对象。</p> <h2> <a id="2_127" rel="nofollow"></a>2、定义静态方法</h2> <p>在Kotlin中实现静态方法反而没那么简单，实现方式如下：</p> <h4> <a id="1_130" rel="nofollow"></a>1、使用单例类实现。</h4> <pre><code>object SIngleInstance {      fun doAction(){} } //调用也简单 SIngleInstance.doAction() </code></pre> <p>看上去是不是和Java中调用静态方法一样，其实Kotlin内部已经创建了唯一的SIngleInstance对象，然后使用对象调用doAction()方法，不过使用单例类的方法就会使类中的所有方法的调用全部变成了类似于静态方法调用的方式了。那么能不能只指定一个或部分方法变成静态方法的调用，这时候就需要companion object了。</p> <h4> <a id="2companion_object_141" rel="nofollow"></a>2、使用关键字companion object实现</h4> <pre><code class="prism language-class">    fun doAction1(){}     companion object {         fun doAction2(){             println("do action2")         }     } } </code></pre> <p>普通类Util中有2个方法doAction1()和doAction2()，他们还是有很大区别的，doAction1()的调用必须使用Util类的对象来调用，而doAction2()可以直接使用Util .doAction2()调用。<br /> 不过doAction2()其实也不是静态方法，companion object这个关键字实际上会在Util类的内部创建一个伴生类，而doAction2()这个方法就是定义在这个伴生类里面的实例方法，只不过Kotlin保证Util类只会存在一个伴生类对象，因此调用Util.doAction2()实际上调用Util类中伴生类对象的doAction2()。<br /> 由此可以看出Kotlin确实没有定义静态方法的关键字，但是提供了一些语法特性来支持静态方法调用的写法。</p> <h4> <a id="3_155" rel="nofollow"></a>3、确确实实的静态方法</h4> <h6> <a id="1_157" rel="nofollow"></a>1、注解方法实现静态方法</h6> <p>注解方式实现静态方法只能用在单例类中或companion object关键中，下面我们在companion object关键中加上注解@JvmStatic：</p> <pre><code>companion object {         @JvmStatic         fun doAction2(){             println("do action2")         }     } </code></pre> <h6> <a id="2_167" rel="nofollow"></a>2、顶层方法实现静态方法</h6> <p>顶层方法是指那些没有定义在任何类中的方法，Kotlin编译器会将所有顶层方法编译成静态方法。比如我们在新建的Kotlin FileHelper.kt中定义一个doSomething()方法</p> <pre><code>fun doSomething() {     println("do Something") } </code></pre> <ul> <li>1、在Kotlin中调用很简单，不用管包名路径，也不用创建实例对象，在任意位置都能调用该方法。</li> <li>2、但是在Java中调用，就不能按Kotlin中这样写否则会报错，在Java中没有顶层方法的概念，所有方法都必须在类中。我们刚才创建的Helper.kt文件，Kotlin编译器就会创建一个HelperKt的Java类，所以在在Java中调用方式为：</li> </ul> <pre><code>HelperKt.doSomething(); </code></pre> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-89571.htm">宠物用品在哪进货（宠物用品哪里进货渠道）</a></p>
                                        <p>下一个：<a href="/news/article-90333.htm">宠物粮食市场前景分析论文题目怎么写（宠物粮调研）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                  <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-82371.htm" title="淮南免费领养狗狗（淮南市哪里可以领养小动物）">淮南免费领养狗狗（淮南市哪里可以领养小动物）</a></li>
                        <li class="py-2"><a href="/news/article-72185.htm" title="宠物领养协议书模板电子版图片 宠物领养协议书模板电子版图片大全">宠物领养协议书模板电子版图片 宠物领养协议书模板电子版图片大全</a></li>
                        <li class="py-2"><a href="/news/article-72184.htm" title="猫三联一般多少钱一针疫苗（猫三联疫苗多少钱一针?）">猫三联一般多少钱一针疫苗（猫三联疫苗多少钱一针?）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-13-node-share-links.htm" title="免费VPN分享 | 3月13日20.1M/S|免费Clash/Shadowrocket/V2ray/SSR订阅节点分享">免费VPN分享 | 3月13日20.1M/S|免费Clash/Shadowrocket/V2ray/SSR订阅节点分享</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-28-free-subscribe-node.htm" title="免费VPN分享 | 3月28日19M/S|免费V2ray/SSR/Clash/Shadowrocket订阅节点分享">免费VPN分享 | 3月28日19M/S|免费V2ray/SSR/Clash/Shadowrocket订阅节点分享</a></li>
                        <li class="py-2"><a href="/news/article-81019.htm" title="[js] 回调函数 回调地狱 Promise async/await">[js] 回调函数 回调地狱 Promise async/await</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-26-node-share.htm" title="免费VPN分享 | 3月26日20M/S|免费Shadowrocket/V2ray/Clash/SSR订阅节点分享">免费VPN分享 | 3月26日20M/S|免费Shadowrocket/V2ray/Clash/SSR订阅节点分享</a></li>
                        <li class="py-2"><a href="/news/article-72850.htm" title="foreach循环中不能使用字符串拼接">foreach循环中不能使用字符串拼接</a></li>
                        <li class="py-2"><a href="/news/article-75527.htm" title="犬只领养协议（犬只领养协议模板）">犬只领养协议（犬只领养协议模板）</a></li>
                        <li class="py-2"><a href="/news/article-81680.htm" title="领养狗的好处和坏处（领养狗的好处和坏处有哪些）">领养狗的好处和坏处（领养狗的好处和坏处有哪些）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">27</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">73</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>



               </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                                        <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                    <p class="copyright_text">
                        免费VPN分享 免费节点订阅官网 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/website/js/frontend/clashfans/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/clashfans/popper.min.js"></script>
    <script src="/assets/website/js/frontend/clashfans/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/clashfans/jquery-3.0.0.min.js"></script>
    <script src="/assets/website/js/frontend/clashfans/plugin.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>